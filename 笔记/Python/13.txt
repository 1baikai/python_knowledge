回顾：
函数式 functional  programing
耦合度
	可重入函数  输出一定结果必然一定
	不可重入函数 
高价函数，俩个条件，函数如果可以传入一个函数，或者可以返回一个函数
map  数据处理
filter 过滤
sorted  排序
这些执行效率高
递归函数  recursion
直接或间接的调用自身。



闭包：函数和执行环境


今日笔记：
装饰器：decorator （专业提高篇）
什么是装饰器：
	装饰器是一个函数，主要作用是用来包装另一个函数或类（后面才讲）
包装的目的是在不改变原函数（或类）的情况下改变被包装对象的行为
函数装饰器
	是指装饰器是一个函数，传入的是一个函数，返回的是一个函数
语法：
	def 装饰器函数名（参数）：
	    语句块
	    return 函数对象
	@装饰器函数名《换行》
	def函数名（形参列表）：
	   语句块
	   return 函数对象
	@装饰器函数名《换行》
	def  函数名（形参列表）：
	    语句块
原理：被装饰函数的变量（函数名）绑定装饰器函数调用后的返回的函数  *****
示例：1


函数的文档字符串：
	函数内第一次未赋值给任何变量的字符串是此函数的文档字符串
语法：
	def 函数名（参数列表）：
	    ‘函数文档字符串’
	     语句块
说明：
	1、文档字符串通常用来说明函数的功能和使用方法
	2、在交互模式下输入：
	help（函数名）可以查看函数的文档字符串
	3、函数文档字符串绑定在函数得到__doc__属性上函数的__doc__属性

示例：def mysum(n):
	  '''mysum函数用来求1+2+3+4+5+6+7+...+n的和'''
	  return 100
	__doc__属性用于记录文档字符串
函数的__name__属性
__name__属性用于记录函数名：
说明：以双下划线开头，以双下划线结尾的标识符通常代表python的特殊变量。


函数定义的完整语法：
	【@装饰器名1】
	【@装饰器名2】
	【@装饰器名3】
	【@装饰器名4】
	def 函数名（位置形参，*元组形参名，命名关键字形参，**字典形参）
	    '文档字符串'
	    语句块
L=[1,2,3]#缺省参数【】在def语句执行时创建此
def f(n=0,lst=[]):
    lst.append(n)
    print(lst)
f(4,L)  #1,2,3,4,
f(5,L)  #1,2,3,5
# f(100)   #[100]
# f(200) 


模块：module
什么是模块：
	模块是包含有一系列数据，函数，类等组成的程序组
	模块是一个文件，模块文件名通常以.py结尾
作用：
	让一些相关的数据，函数，类等有逻辑的组织在一起，是逻辑结构更加清晰
	模块中的数据，函数和类可以提供给其他模块或程序使用
模块的分类：
	1、内置模块在解释执行器内部定义，可以直接使用
	2、标准库模块，安装Python时已安装且之间可以使用
	3、第三方模块（通常为开源），需要自己安装
	4、用户自定义模块，）可以作为其他人的第三方模块
    

模块的导入 import
语法：	
	import  模块名1【as 模块新名1】，模块名2[as 模块新名2],...
作用：
	将某模块整体导入到当前模块中
示例：
	import math #导入数据模块
	import sys,time #导入系统模块和时间模块
用法：
	模块名.属性名
	如;print(math.factorial(5))
	print(math.cos(0))

函数：
	dir(obj)函数，返回所有属性的字符串列表
	help（obj）函数，可以查看模块的文档字符串

math,factorial(5)   120
math .pi   3.14...
math.

from import 语句
语法：
	from模块名 import 模块属性名1 【as 属性新名1】，模块属性名2【as 属性新名2】...
作用：
	将某模块内的一个或多个属性导入到当前模块的作用域
示例：
	from math import factorial as fac
	from math import sqrt
	from math import pi
	print('5的阶乘：',fac(5))
	print('9d的平方根：',sqrt(9))
	print('圆周率：',pi(5))

from import * 语句
语法：
	from 模块名 import *
作用：将某模块的所有属性导入到当前模块
示例：
	from math import *
	print(sin(pi/2))
	print(factorial(5))# 可以直接使用math开的全部属性

dir 函数：
	dir ([对象])  返回一个字符串列表
作用:
	如果没有参数调用，则返回当前作用域内所有变量的列表
	2、如果给定一个对象作为参数，则返回这个对象的所有变量的列表
	1）对于一个模块，返回这个模块的全部属性
	2）对于宇哥类对象，返回类对象的所有变量并递归基类对象的所有变量
	3）对于其他对象返回所有变量，类变量，和基类变量。


数学模块 math
	文档参见。math。html



















