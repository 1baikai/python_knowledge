15

迭代器
	iter(obj)  返回迭代器
	next（iterator） 返回可迭代对象提供的数据以stopiteration异常通知
生成器：
	两种：1、生成器函数2、生成器表达式
生成器函数：
	def 函数（）：
	    #语句内部都有yield语句。返回来是一个生成器是一个可迭代对象
	gen=myyield()
	it=iter(gen)
	next(it)才让myyield（）函数执行，并遇到yield语句
迭代工具函数
	zip(iter,*iterable)
	enumerate(iterable,start=0)
字节串bytes/字节数组 bytearray


文件 file 
    什么是文件
	文件是用于数据存储的单位
	文件通常用来长期存储数据
	文件中的数据是以字节（byte）为单位进行存储的
文件的操作流程
    1、打开文件
    2、读/写文件
    3、关闭文件
注：任何操作系统，一个应用程序同事打开文件的数量有最大数限制，

文件的打开函数：
   open（file ,modee="rt"）
用于打开一个文件，返回此文件对应的文件流对象，如果打开失败则会触发OSError错误

文件的关闭方法：
F.close()#关闭文件，释放系统资源


文本文件的操作：
    文本文件的模式字符‘t’
    说明：
	1、对文本文件的读写需要用字符串str进行读取和写入数据
	2、默认文件中存储的都是字符（文字）数据，在读写中会自动进行编码转换操作
 	3、以行为单位分隔，在python内统一用"\n"作用换行符进行分隔
各操作系统的换行符
Linux   ‘\n’
windows     '\r\n'
旧的macintosh   ‘\r’
mac os            \n
文件
   文件流对象常用的方法见：
              文件.html
           f = open('mynote.txt')
           s = f.read(2)
           s = 'ab'
           s = f.read(2)
           s = 'ab'    
           f.close()(一定要加)
        文本文件的读取方法：
         f.read()
         f.readline()
         f.readlines()
         f.read([字符串或字节数])
       文本文件的写方法
         模式字符串: 'w'/'x'/'a'
         f.writelines(lines)
         f.write(text)
       文件的迭代读取：
         文件流对象是可迭对象，迭代过程将以换行符'\n'作用分隔符依次获取
          实例：
            f = open('mynote.txt', 'rt')
            for line in f: # f绑定的文件流对象时可迭代对象
                print(line)

标准输入输出文件：
	sys.stdin标准输入文件（默认为键盘设备）
	sys.stdout标准输出文件（默认为屏幕终端）
	sys.stderr标注错误输出文件（默认屏幕终端）
模块名：sys
说明：
1、标注文件不需要打开和关闭就可以使用
2、每一个python程序启动后都会有以上三个文件供我们使用。
示例标准文件的sys.stdin的用法
import sys
s=sys.stdin.readline()
print(s)

s2=input("请输入")
print(s2)
#################
import sys
s=sys.stdin.read
print(s)

#################
import sys
sys.stdout.write("我是一个标准输出")
sys.stderr.write("我的出现是一个错误")


二进制的文件操作：
	模式字符: 'b'
默认文件中存储的都是以字节为单位的数据，通常有人为的格式对二进制文件的读写需要用字节串（bytes）进行操作

常用的操作方法：
F.read([字节数/字符数])
	对于文本文件，F.read（）返回的类型为字符串str
	对于二进制文件，F。read（）返回类型为字节串bytes
F.write（）
	同上，对于二进制文件，写入的数据为字节串bytes,或bytearray

try:
    fr=open("mynote.txt",'rb')
    b=fr.read()
    print(b)
    fr.close()
except oserrr:
    print("打开失败")


try:
    fbw=open("mybinary.bin",'wb')
    s='你好'
    b=s.encode('utf-8')
    fbw.write(b)
    fbw.close()
    print("文件写入成功")
expect oserr：
    print（"打开写文件失败"）


此示例：seek方法的用法
f=open("20.txt",'rb')
b=f.read(3)
print(b)

pos=f.tell()
print("当前的读写位置是："，pos)
b2=f.read（1）

print("读一个字节后的读写位置是",f.tell())
f.close()

F.tell()方法
	返回当前文件流的读写位置（从0开始，以字节为单位）
F.seek方法
作用：
	这只文件的读写位置
格式：
	F，seek（偏移量，whence=相对位置）
	偏移量
	    大于0代表向文件尾方向移动
	    小于0代表向文件头方向移动
	相对位置：
	0 代表从文件头开始偏移
	1代表从当前位置开始便宜
	2代表从文件尾开始便宜
示例见：

汉子编码：
1、20个GBK编码
2、30个UTL

国标编码
	GB18030（二字节或四字节编码，27533个字）
	GBK（二字节编码 21003个字）
	GB2312（二字节编码 6763个字）
	windows上常用
国际标准
	UNICODE	《-----》UTF-8
(LINux/Mac os 	x  /  	ios/  android)


python 的编码（encode）字符串
gb2312
gbk
gb18030
uft-8
编码注释：
在原文件中第一行或者第二行写入如下内容为编码注释
#_*_ coding:gbk _*_
设置原文件编码格式为：gbk
#_*_ coding:utf-8 _*_
设置原文件编码格式为utf-8 

z作用：
告诉解释执行器，当前的。py文件的编码格式是什么





# def list_to_file(lst,filename='abc.txt'):
#     try:

#         f=open(filename,'w')
        
#         for x in lst:
            
#             f.write(x)
#             f.write('\n')
#         f.close()
#     except OSError:
#         print("xierushibai")
# L=dhuru()
# list_to_file(L)