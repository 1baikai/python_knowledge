昨天回顾：
in/ not in
列表的索引
	列表支持索引赋值
列表的切片
	列表的切片赋值可以实现，替换，添加删除列表中的元素
删除列表中的元素
	del 列表[索引]
	del 列表[切片]
	列表.pop([索引])
	列表.remomve(对象)
列表的方法：
	L.clear()
	L.append()
	L.extend()
	L.clear()
	L.remove()
	L.pop()
	L.linsert()
用于列表的函数
	len（），max（）,min（）.sum（）,any（）,all（）
深拷贝和浅拷贝
L1=[1，2，，[3,4,[5,6]]]
L2=L1   绑定关系
L3=L1.copy()   #L3=L1[:]浅拷贝  相当于，一个列表完全切片称为新的列表
import copy
L4=copy.deepcopy(L1)

字符串的两个方法
	S.split  如：s="abcd,123,ABC"  #s.split(',')=['abcd','123','ABC']
	S.join   如：L=['abcd','123','ABC']
列表推导式：
	L=[5,4,7,2,1]
	L2=[str(x**2) for x in L]
	S='+'.join（L2）
	#S='25+16+49+4+1'


7笔记：
	元组 tuple
	元组是不可改变的序列，同list一样，元组可以存放在任意类型的元素
	元组一旦创建将不可改变

元组的表达式：
	用小括号（）括起来，单个元素括起来后加逗号（，）区分单个对象还是元组

创建空元组的字面值表达式
	t=（）#（）是创建一个空的元组对象 （元组要用逗号分隔开，不管是单个还是多个）
创建非空元组的字面表达式
	t=200,
	t=(20,)
	t=(1,2,3)
	t=100,200,300
注：
	type（x）函数 ，可以返回X的类型

元组错误示例：
	t=（200）#t 绑定20 这个对象，不是元组
・	x,y,z=100,200,300  #序列赋值
	x,y,z=(100,200,300)
	x,y,z=[100,200,300]
	x,y,z="ABC"

元组的构造函数tuple
	tuple（）生成一个空的元组，等同于（）
	tuple（iterable） 用可迭代对象生成一个元祖
示例：
	t=tuple()
	t=tuple("abc")
	t=tuple(range(1,10,2))

元组的运算：
	+ 用于用拼接方式创建新的元组
	* 用于生成新的重复的元组
t=（1，2，3）+（4，5，6）#t=（1，2，3，4，5，6）
t+=(7，8，9)  #t =（1，2，3，4，5，6，7，8，9）
t=（1，2）*3  #t=（1，2，1，2，1，2）


元组的比较运算
< <= > >= == != 规则与列表的比较规则完全相同
元组的in / not in 运算符
	用于判断元素是否存在于元组中，规则与列表完全相同
索引 index
	用法等于同列表的索引      
	元组不支持索引赋值
切片
	用法与列表的切片用法相同
	元组的切片返回一个新的元组
	元组不能切片赋值




元组的方法：T.index(v[,begin[,end]])返回对饮元素的索引下标，
begin为开始索引，end为结束索引，当V不存在时触发VALUEERROR错误
T.count(x)返回元组中对应的元素个数


序列小结：
	字符串str	
	列表 list（可变的）
	元组tuple
	-----------------
	字节串 bytes
	字节数组  bytearray（可变的）


序列相关的函数：len，max min sum any all

reversed（x）返回反向顺序的可迭代对象
示例：
	s=“ABC”
	for ch in s:
	    print(ch)#ABC  
			
	for ch in reversed(s)  #CBA

字典 dict 
	什么是字典：
	字典是一种可变的容器，可以存储任意类型的数据
	字典中的每一个数据都是用‘键’（key）进行索引的而不像序列可以用索引下标索引
	字典中的书库没有先后顺序关系，字典的存储是无序的
	字典中的数据以键-值（key-value）对形式进行隐射存储
	字典的键不能重复，且只能用不可变类型作为字典的键
字典的字面值表示方法：
	以｛｝括起来，以冒号（：）分隔键-值对各键值对用逗号分隔开
创建空字典：
	d=｛｝#｛｝表达式用来创建一个空字典
创建非空字典：
	d=｛'niame':'baikai','age':23｝
	d={'a':100}
	d={'a':tuple("ABC")}
	d={'abc':list("ABC")}
	d={‘a’：{'b':100,'c':200}}
	d={true:'真值’,flase:‘假值’，none：‘空’，100：‘一百’}
	d={(1970,1,):'计算机元年'}

字典的构造函数 dict

	dict（）创建一个空的字典，等同于｛｝
	dict（iterable） 用可迭代对象创建一个新的字典
	dict（**kwargs）用关键字传参形式创建一个新的字典
示例：
	d=dict（）
	d=dict（[('name','tarena'),('age',15)]）
	d=dict((['name','baikai'],"ab"))
	d=dict(name='baikai',age=23) 

字典的操作
	字典的建索引
	用[]运算符可以获取字典内‘键’对应的‘值’
语法：
	v=字典[键]
	d={'name':'baikai','age':20}
	print(d['name'],'今年',d['age']，'岁')
添加/修改字典的元素
	语法：
	字典[键]=表达式
示例
	d={}
	d['name']='baikai'#创建新的键“name”同时关联值
	d['age']=15  #创建键并绑定15
	d['age']=15 #创建原来的键‘age’，重新绑定为16
说明：
	键不存在，创建键，并绑定值
	键存在，修改键的绑定关系

删除字典元素del语句
	del字典[键]
示例：
	d={1:'一','hello':word,Ture:'真值'}
字典的in  、、not in 运算符
	in用来判断一个键是否存在于字典中，如果存在返回True 否则返回false
	not in 相反
实例：
                
  d = {'name': '小张', 'age'：20}
 
      'name' in d      #  True
        
       'name' not in d  #返回False
            
       '小张' in d      #False(只判断键，不判断值)
         
        20 not in d      #True

字典的迭代访问
	字典是可迭代对象，字典只能对键进行访问
示例：
	d={‘aaa’:‘111’,'bbb':'222','ccc':333}
	for k in d :
	    print(k)


可以用于字典的函数：
	len（x）返回字典的键值对的个数
	max（x）返回字典键的最大值
	min（x）返回字典键的最小值
	sum（x）返回字典所有键的和
	any(x)真值测试，只对键进行测试
	all(x)真值测试，全部键为真值，结果才为true
示例：
            
  d = {0:'零',5:'五'，8:'八'，3：'三'}
        
        len(d)  #4
        
        max(d)  #8
        
        min(d)  #0
         
        sum(d)  #16
         
        any(d)  #True
        
        all(d)  #False
字典的方法：


方法名                  说明
D.clear()               清空字典
D.pop(key)              移除键，同时返回此键的对应值
D,copy()                返回字典D的副本，
D.update（D2）          将字典D2合并到D中，如果键相同，则此键的值取D2的值为为新值
D.get（key，default）   返回键key所对应的值，如果没有此键，则返回Default的值
D.key（）               返回可迭代的dict_keys集合对象
D.values（）            返回可迭代的dict_values集合对象
D。items（）            返回可迭代的dict_items集合对象

示例：
d={1:'one',2:"two"}
d2={2,'二'，3：‘三’}
d3=d.copy()   #{1: 'one', 2: 'two'}
d3,pop(1)  #'one'      {2: 'two'}


>>> d.update(d2)
>>> d
{1: 'one', 2: 'er', 3: 'san'}
>>> for t in d.items():
...     print(t)
... 
(1, 'one')
(2, 'er')
(3, 'san')

>>> for k ,v in d.items():
...     print('键',k,'对应的值是',v)
... 
键 1 对应的值是 one
键 2 对应的值是 er
键 3 对应的值是 san


字典推导式
	是用可迭代对象生成字典的表达式
语法：
	｛键表达式：值表达式 for 变量 in 可迭代对象[if真值表达式]｝
	注：[]表示其中的内容可省略
示例：
	生成一个字典，键为数字1~9，值为键的平方
	d=｛x：x**2 for x in range（1，10）｝  



字典推导式练习：
	已知有如下字符串列表
	L=['HAH','XIIX','HEH']
	生成如下字典：
	d=｛'HAH':3,'XIIX':4,'HEHee':5｝
	注：字典的值为键的长度
2 已知有如下俩个列表：
	nos=[1001,1002,1005,1008]
	name=['tom','jarry','Spike','Tyke']
	用上述两个列表生成如下字典：
	｛1001：'tom',1002：'jarry',1005：'Spike',1008：'Tyke'｝


字典推导式的嵌套等同于列表推导式的嵌套
	字典vs 列表
	1都是可变对象
	2索引方式，列表用整数索引，字典用键索引
	3.字典的插入，删除，修改的速度可能会快与列表（重要）
	4列表的存储是有序的，字典的存储是无序的
示例：

L=[9,4,10043,5,12,3.......,123]
