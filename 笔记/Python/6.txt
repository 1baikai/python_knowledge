啦啦啦啦啦啦，一脸懵逼

for  语句
	作用：
	用来遍历可迭代对象的数据元素
		可迭代对象是指能依次获取数据元素的对象
可迭代对象包括：
	字符串 str
	列表
	元祖
for 语句：
	for 变量列表 in  可迭代对象：
		语句块1
	else：
		语句块2
示例：
	for.py
for 语句说明：
	else子句部分可以省略
	当在循环内部用break终止循环时，else子句部分不会执行


range函数
	range（stop）用来生成0~stop区间内的整数，直到stop为止（不包含stop）
	range（start，stop[,step]）
	用来生成start~stop区间内的整数，直到stop为止（不包含stop），每次生成整数后一定step
格式详见：
	help（range）
作用：
	用来创建一个生成一系列整数的可迭代对象（也叫整数序列生成器）
说明：
range返回的对象可以有for语句来进行依次迭代访问取出其中的整数
示例：
range（4）  #生成0，1，2，3
range（3，6） #生成3,4,5
range(1,10,2)#生成1，3，5，7，9
range（5，0，-2） #生成5，3，1
range（4，0）  #空


for语句变量可能不被创建的问题：
	for x in range (4,0)
	    print(x)
	print("绑定x"，x)


for 语句的嵌套
	for x in  "123":
		for y in "123"
			print(x+y)
continue语句
    作用：用于循环语句（while，for）中，不在执行本次循环continue之后的语句，重新开始一次的循环
    语法：continue
    说明：
 	1、在while中执行continue，将会直接跳转到while语句的真值表达式处重新判断循环条件
	2、在for语句中执行continue语句，将会从可迭代对象中取下一个元素，绑定变量后在进行一次循环。

for x in range (5):
    if x==2:
        continue
    print(x)

for x in range (10):
    if x%2==0:
	continue
    print(x)

while中使用continue示例见：

	循环小结：
	四条语句
	while 语句
	for
	break
	continue
可迭代对象':
str 字符串
range（）函数返回的对象


list列表：
如何降级计算机运算的数据临时保存在一个地方，同时又方便添加，删除和修改等操作。
列表；的定义：
	列表是一种容器
	列表是可以被改变的序列
	列表是由一系列特定的元素组成的，元素与元素之间可能没有任何的关联关系，但他们之间有先后顺序关系
Python3的中的序列类型
	字符串str
	列表list	
	元组 tuple
	字节串 bytes
	字节数组 bytearray
创建空列表的字面值表达式
	[]  #创建一个空列表
创建非空的列表的字面值：
	l=[1,2,3,4]变量l绑定一个新创建且含有四个元素的列表
	L=['beijing','shanghai','shenzhen']
	L=[1,'TWO',31.4,'四']
	L=[1,2,[3.1,3.2,3.3],4]
列表的构造函数list
list（）生成一个空的列表，等同于[]
list（iterable）用可迭代对象创建一个列表
示例：
	L=list（）#L=[]
	L=list（“hello”）#L=['h','e','l','l','o']
	L=list（range（5））#L=[0,1,2,3,4]


列表的运算：
算数运算：
+ += * *=（运算规则与字符串的运算规则相同）
+ 用于列表拼接，生成新的列表
x=[1,2,3]
y=[4,5,6]
z=x+y   #z=[1,2,3,4,5,6]
  
    +=用愿列表与右侧可迭代对象追加来（修改）原列表
                  语法：
                      列表变量 +=  可迭代对象(追加的意思)
                  x = [1,2,3]
                  y = [4,5,6]
                  y += y   #  x(1,2,3,4,5,6)
                  x += 'ABC'(可迭代对象)  # x = [1,2,3,4,5,6,'A', 'B', 'C']
                  # +=是改变原来的对象，并不会创建新的列表
                  x = [1,2,3]  
                  print(id(x))
                  x +=[4,5,6]
                  print(id(x))   #id值和原来的id值相同
*  生成重复的列表  （ID改变）
	x=[1,2]*3      #x=[1,2,1,2,1,2]
*=生成重复的列表，并改变对变量的绑定
	x=[1,2,3]
	x*=4    #x=[1,2,,3,1,2,,3,1,2,3,1,2,3]
列表的比较运算：
	运算符：
	< <= > >= == !=
	比较规则与字符串的比较规则相同

列表是可迭代对象
L =[1,3,5,7]
for x in L:
    print(x)     #1357