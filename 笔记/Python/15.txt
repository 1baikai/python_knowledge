6预置属性：
__doc__  当前模块的文档字符串
__file__  绑定路径
__name__   用来绑定模块名，区分主模块和非主模块

from  import * 语句导入
__all__=['aaa','bbb']
_xxxx=1000  #隐藏属性

包
__init__.py  包文件，写一些变量，函数，文档文件。
__all__列表一定要在__init__.py里
包的导入
绝对导入：from mypack.games.contra import *
相对导入：from .menu import show_menu
	  from ..xxxxx import  yyyy
搜索路径：
    当前路径
	sys.path指定的路径
    


异常：exception
    什么是错误：“错误是指由于逻辑或语法等导致一个程序无法正常执行”
    什么是异常：“异常是指程序出错时标识的一种状态”“当异常发生时，程序不会在向下执行，而转去调用此函数的地方待处理此错误并回复正常状态”
     作用：
	用作信号，通知上层调用者有错误产生需要处理。
try语句的两种用法：
     try-except 语句
     try-finally 语句
try-except 语法
     try：“可能触发异常的语句”
     except 错误类型1  [as 变量1]：
	异常处理语句1
     except 错误类型2  [as 变量2]：
	异常处理语句2
     except 错误类型3  （变量3，变量4）：
	异常处理语句3
     。。。
     except:
	异常处理语句other
     else：
	未发生异常语句
     finally：
	最终语句
作用：尝试捕获异常（接收异常通知），将程序转为正常状态并继续执行语法说明：
     as子句是用于绑定错误对象得到变量，可以省略
     except
子句可以有一个或多个，但至少要有一个
     else 子句最多只能有一个，也可以省略
     finally 子句最多只能有一个，也可以省略
示例：见1


try-finally语句
    语句：
	try:
	    可能触发异常的语句
	finally：
	     最终语句
    说明：
	finally子句不可以省略
	一定不存在except子句
    作用：
	通常用try-finally语句来做触发异常时唏嘘要处理的事情，无论异常是否发生，finally子句都会被执行
	try-finally语句不会改变程序的（正常、异常状态）

try语句嵌套
    try嵌套是指一个try语句嵌套在另一个try语句内使用。

raise语句：
作用：
	触发一个错误，让程序进入异常状态
	发送错误通知调用者
语句：
	raise 异常类型
	raise 异常对象
	raise #重新触发上一次异常
示例见：222

assert语句（断言语句）
    语法：
	assert 真值表达式，错误数据（通常是字符串）
    作用：
	当针织表达式为false时，用错误数据创建一个assertionerror类型的错误raise处去，并进入异常状态
    等同于：
	if 真值表达式==false：
	    raise assertionerror（错误数据）

为什么要用异常处理机制
   在程序调用层数较深时，向主调函数传递错误信息需要层层return
   返回比较麻烦，所以用异常处理机制
