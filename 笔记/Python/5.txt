回顾：
字符串：	
    记录文字信息  整数编码（Unicode）

空字符串：
	“aaa”‘aaaa’'''kkkkkkkk'''       """llllllllll"""
ascii编码：（0~127）
Unicode编码，（0~127~65535）

r原始字符串
	r'\a\c\s\v'八个字符
运算符
+  *  +=  *=
>   >=  <  <=  ==  !=
in   /    not in  
序列：
	索引/切片操作
索引 ：得到一个元素
切片：从字符串拿出一部分字符，重新组成字符串
函数：len(x)  max(x) min(x) ord(c) chr(i)返回i的对应字符 
 bin(i)2进制 oct(i)8进制    hex()16进制   str()






字符串格式化表达式
		作用：
	生成一定格式的字符串
	运算符：%
	语法格式：
		格式字符串  % 参数值
		或
		格式字符串   % （参数值1，参数值2，。。）
	说明：
	     % 左侧为个=格式字符串
	     % 右侧为参数值，当有多个参数值是用括号（）括起来，并用逗号（，）分隔
	      格式化字符串中以%开头的为占位符，占位符的位置将用参数值替换。
	示例：
	     fmt="name : %s, age:%d"
	      s=fmt%('baikai',22)
	     print(s)    #  name :baikai,sge:22
	     "wendu:_%d_" % 32
格式化字符串中的占位符和类型码
	%s      字符串，使用str（x）将x转换为内字符串   给人看的
	%r      字符串，使用repr（)将x转换为字符串     给机器看的
	%c      整数转为单个字符
	%d	转为十进制整数
	%o	转为八进制整数
	%x	十六进制整数（a~f）
	%X	十六进制整数（A~F）
	%e	指数型浮点数（e小写），如2.9e+10
	%E	指数型浮点数（E大写），如2.9E+10
	%f，%F  浮点数（小数形式）
	%g，%G  十进制浮点数或指数浮点自动转换
	%%      等同于一个%字符
占位符和类型码之间的格式化语法：
	% [- + 0 宽度.精度] 类型码
	- ： 左对齐
	+ ：显示正号
	0 ：左侧空白位置补零
	宽度：整个字符串的字符个数
	精度：保留小数点后多少位（默认6位）
示例：
	"%10d"  %  123        #'       123'
	"%-10d"  %  123       #'123       '
	"%10s"   %'abc'       #'       123'
	"%-5s"    %'abc'      #'abc       '
	"%010d"   %123        #‘0000000123’
	"%7.3f"    %3.141592535897932   #'   3.141'
	"%07.2f"   %3.141592535897932   #'0003.14'

练习：
	1、任意输入三行文字，让着三行文字一次以20个字符的宽度右对齐显示输出
	如：请输入第一行：jhasgkasd
	    请输入第2行：
	    请输入第3行：
	输出结果：             lkhsdla
				  kjdh
				dhqodc


循环语句：
	有两条循环语句：
		while 语句
		for   语句
	问题：
	输入一个整数N，写程序打印如下N行字符串
		这个是第一行
		。。。。。
		这个是第N行
	如何让一条语句重复执行多次？
		如果i是一个变量，
	print（“这是第”，i，“行”）


while语句：
	作用：
		根据一定条件，重复的执行一条语句或者多条语句
	语法：
		while  真值表达式：
			语句块1
		else：
			语句块1
	说明：
	1、先判断真值表达式，为TRUE或False
	2、如果为True 则执行语句1，在回到第一步
	3、如果为false，则执行语句2 ，然后结束此while的执行
	4、else子句部可以省略。

示例：
	i=1     #  i变量用于控制循环条件
	while i <=20:    #如果条件为TRUE
	    print("hello")
	    i+=1	  #改变循环条件以便让循环终止
	else：
	    print（"这时else子句，此时将离开while语句"）
	    print（"此时i的值是："，i）  # 4

输出1~20：
i=0
while i <20:
    i+=1
    print(i)
练习：1打印1~20 的整数，打印在一行内
	123456789。。18，19，20
	print（i,end=''）
      2,打印1~20的整数，每行5个，打印4行
	提示：
	可以将if语句嵌入到while中来实现换行
      3，用while语句，打印10~1的整数


while  语句注意事项：
	要控制循环真值表达式的值来防止死循环
	通常用针织表达式内的循环变量来控制循环条件
	通常再循环语句块内改变循环来控制循环次数和变量走向
while 语句的嵌套
	while 语句本身是语句，和其他语句一样，可以嵌套到任何复合语句中
示意：
            while  真值表达式：
                ...
                while 真值表达式2：
                    ...
                else:
                    ...
            
           实例：
               #打印移到20的整数，打印在一行内
              1=1
              while i <= 20:
                  print(i, end=' ')
                  i +=1
              else:
                  print()
break 语句:
        作用：用于循环语句（while，for语句）中，用来终止当前循环语句执行
	语法：
	break
	说明：
	1、当break语句执行后，此循环语句break之后的语句将不再执行
	2、break语句通常和if语句组合使用
	3、break语句终止循环时else子句的语句将不会执行
	4、break语句只能终止当前循环语句的执行，如果有循环嵌套时，不会跳出嵌套外的重循环
死循环
	死循环是指条件一直成立的循环
	死循环通常用break语句来终止循环
	死循环的else子句永远不会执行
循环输入字符串，当输入“quit”结束输入
将每次输入的内容打印在屏幕上
while ture：
    s=input（“请输入：》》》”）
    if s=="quit"
	break
    print("您刚才输入的是："，s)
else：
    print（“永远不会执行”）
print("程序结束")


练习：求下列多项式的和
	1+1/2+1/4+1/8+...+1/2**1000的和
2 写程序求：
	1-1/3+1/5-1/7+1/9+...+1/(2*n-1)的和
	求当n等于10000时，此公式的和
	将上述结果乘4后打印出来
3