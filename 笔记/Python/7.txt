列表list
	可变的容器
	序列：str，list，
		+ +=  *  *=
		< <= > >= == !=
		in / not in /索引/切片
	序列都是可迭代对象
列表的in / not in 运算符
	判断一个值是否存在于列表中，如果存在返回TRUE,否则返回false
	同字符串的in运算符
	用于检查一个值是否存在于列表中，如果存在返回true
	否则返回false
示例：
x=[1,'tow',3,‘四’]	
3 in x   #返回True
     
'3' in x #返回false
     
10 in x  # 返回flse

列表的索引操作
	语法：
	列表[整数表达式]
	用法：与字符串索引的用法相同（分为正向索引和反向索引）
x=[1,3,5,7]
print(x[1])          #3
print(x[-1])        #7


列表的索引赋值；
	列表是可变的，可以通过索引赋值改变列表中的元素
	语法：
		列表【整数表达式】=表达式
	作用：
		改变列表中索引的绑定关系
	示例：
		x=[1，2，3，4]
		x[2]=3.14   #改变了第三个元素的值
列表d的切片
	列表[:]
q	列表[::]
	列表的切片取值返回一个新的列表，规则等同于字符串切片的规则
・・	示例：
・・・	x=[1,2,3,4,5,6,7,8]
	x[::2]  #[1,3,5,7]
	x[1::2]  #[2,4,6,8]
	x[1::3]  #[2,5,8]
列表的切片赋值
	作用：可以改变原列表的数据排列，可以插入和修改数据
	可以用切片改变列表的对应元素的值
	语法：
	列表【切片】=可迭代对象
	说明：
	切片赋值的赋值运算符（=）的右侧必须是一个可迭代对象

示例：
	L=[2,3,4]
	L[0:1]=[1.1,2.2]  #L=[1.1,2.2,3,4]
	L=[0:0]=[1,2]# L=[1,2,3,4]
切片的注意事项：
	对于步长不等于1 的切片赋值，赋值运算符的左侧的可迭代对象提供元素的个数一定要等于切片切出的段数
示例：
	L=[1,2,,3,4,5,6,7,8]
	L[1::2]="ABCD"#对
	L[1::2]="ABCDEF"错

del语句用于删除列表的元素
	语法：
	del 列表[索引]
	如：del L[0]
	del列表[切片]
	如：del L[1::2]

练习：已知有列表：
	L=[3,5]
用索引和切片操作，将原列表改变为：[1,2,,3,4,5,6]
将列表翻转，删除最后一个元素后打印次列表
	print（L）


Python 3 中常用的序列的函数
	len（s）返回序列的长度
	max（x）返回序列的最大值元素
	min(x)  返回序列的最小元素
	sum(x)  返回列中多有元素的和（元素必须是数值类型）
	any(x)  真值测试，如果列表中其中一个值为真值则返回True
	all(x)  真值测试，如果列表中所有值为真值返回true

示例：
	L=[3,1,9,7,5]
	print(len(L))        5
   	print(max(L))             9
	print(min(L))          1
	print（sum（L））        25

练习：
	写程序，让用户循环输入一些整数当输入-1时结束输入，将这些整数存于列表中
	1、打印您工输入了多少个有效数
	2、输入的最大的数是
	3、最小的是
	4、平均值是

练习：
写一个程序：让用户输入很多歌正整数，当输入小于零的数结束输入，打印这个些数的最大的，打印这些数中第二大的数，删除最小的一个数，按原来的顺序打印出剩余的这些数


深拷贝和浅拷贝
浅拷贝 shallow copy
		浅拷贝是指在复制过程中，只复制一层变量。不会复制深层变量绑定的对象的复制过程
示意：
	L=[3.1,3.2]   #
	L1=[1,2,L]    #
	L2=L1.copy()   #
	print(L1)     #
	print(L2)       #
	L2[2][0]=3.14  #
	print(L1)    #【1，2，【3.14，3，2】】
	print(L2)    #【1，2，【3.14，3，2】】
深拷贝：deep copy
	复制对象及对象关联的对象一起复制过程叫深拷贝
示例：
import copy
L=[3.1,3.2]   #
L1=[1,2,L]    #
L2=copy。deepcopy(L1)   #深拷贝
print(L1)     #
print(L2)       #
L2[2][0]=3.14  #
print(L1)    #【1，2，【3.1，3，2】】 L 1不变
print(L2)    #【1，2，【3.14，3，2】】

列表和字符串比较：
	1，都是序列，有先后的顺序关系，有相同的运算操作
	2，列表是可变的，字符串是不可变的，
	3，列表可以存任意类型的数据，字符串只能存字符
字符串的文本解析方法：
	s.split（sep=None）将字符串，使用sep作用分隔符分隔S字符串，返回分隔后的字符串列表，当不给定参数时，用空白字符做为分隔符分隔。
	S.join（iterable）
	用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串
示例：
	S='biejing is capital'

列表推导式list comprehension
	列表推到式使用可迭代对象创建列表的表达式
	作用：
	用简易的方法生成列表
	语法：
	[表达式 for 变量 in 可迭代对象]
	或
	[表达式 for变量 in 可迭代对象 if针织表达式]
示例：
	#生成一个数值为1~9的平方的列表
	#【1，4，9，16，。。。81】
、


#不用推导式：
	l=[]
	for i in range (1,10)
	    l.append(i**2)

#推导式实现
	L=[i**2 for i in range(1,10)]

列表推导式生成1~100以内奇数的列表

l=[2*n-1 for n in range(1,100)]








