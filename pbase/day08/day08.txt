
集合 set
  集合是可变的容器
  集合内的数据对象都是唯一的(不能重复多次的)
  集合是无序的存储结构,集合中的数据没有先后关系
  集合内的元素必须是不可变对象
  集合是可迭代对象
  集合是相当于只有键没有值的字典(键则是集合的数据)

创建空的集合:
  set()

创建非空的集合的字面值:
  s = {1, 2, 3}

集合的构造函数:
  set()  创建一个空的集合(不能用{} 来创建空集合)
  set(iterable) 用可迭代对象创建一个新的集合

  示例:
    s = set()
    s = {2,3,5,7}
    s = set("ABC")  # s = {'A', 'B', 'C'}
    s = set("ABCCBA")  # s = {'A', 'B', 'C'}
    s = set({1:"1", 2:'2', 5:'5'}) # s = {1, 2, 5}
    s = set(('ABC', '123', True))
    s = {True, None, "ABC", (1, 2, 3)}

python3 中不可变数据类型
  bool, int, float, complex, str, tuple, frozenset,bytes(后面才学)

  None

可变数据类型
  list, dict, set, bytearray(后面才学)

集合的运算:
  交集&  并集|  补集-  对称补集^  子集<  超集 >

& 用于生成两个集合的交集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s1 & s2  # {2, 3}

| 生成两个集合的并集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s1 | s2  # {1, 2, 3, 4}

- 生成两个集合的补集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s1 - s2  # {1}  # 生成属于s1, 但属于 s2的所元素的集合

^ 生成两个集合的对称补集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s1 ^ s2  # {1, 4}

> 判断一个集合是另一个集合的超集
< 判断一个集合是别一个集合的子集
  s1 = {1, 2, 3}
  s2 = {2, 3}
  s1 > s2  # True
  s2 < s1  # True

== != 集合相同/不同
  s1 = {1, 2, 3}
  s2 = {3, 2, 1}
  s1 == s2   # True

in / not in 运算
   in 同列表和字典的in运算符规则相同,如果存在于集合中返回 True,否则返回False
示例:
  2 in {1, 2, 3}  # True

用于集合的函数
  len(x)  返回集合的长度
  max(x)  返回集合的最大值元素
  min(x)  返回集合的最小值元素
  sum(x)  返回集合中所有元素的和
  any(x)  真值测试，规则与列表相同
  all(x)  真值测试，规则与列表相同

集合是可迭代对象,可以用于for语句中

练习:
  经理有: 曹操，刘备，孙权
  技术员有: 曹操，孙权，张飞，关羽
  用集合求:
    1. 即是经理也是技术员的有谁?
    2. 是经理，但不是技术人员的都有谁?
    3. 是技术人员，但不是经理的都有谁?
    4. 张飞是经理吗？
    5. 身兼一职的人都有谁?
    6. 经理和技术员共有几个人?
################################

managers = {'曹操', '刘备', '孙权'}
techs = {'曹操', '孙权', '张飞', '关羽'}

print("即是经理也是技术员的有:", managers & techs)
print("是经理，但不是技术人员的都有:", managers - techs)
print("是技术人员，但不是经理的都有:", techs - managers)
if '张飞' in managers:
    print("张飞是经理")
else:
    print("张飞不是经理")

print("身兼一职的人都有", managers ^ techs)
print("经理和技术员共有%d个人" % len(managers | techs))




集合的方法:
  详见:
    >>> help(set)

S.add(e) 在集合中添加一个新的元素e；如果元素已经存在，则不添加
S.remove(e) 从集合中删除一个元素，如果元素不存在于集合中，则会产生一个KeyError错误
S.discard(e)  从集合S中移除一个元素e,在元素e不存在时什么都不做;
S.clear() 清空集合内的所有元素
S.copy()  将集合进行一次浅拷贝
S.pop() 从集合S中删除一个随机元素;如果此集合为空，则引发KeyError异常

集合推导式:
  是用可迭代对象创建集合的表达式 

  语法:
    {表达式 for 变量 in 可迭代对象 [if 真值表达式]}

  [] 部分代表可省略

  示例:
    numbers = [1, 3, 5, 7, 9, 3, 4, 5, 6, 7]
    s = {x ** 2 for x in numbers if x % 2 == 1}
    print(s)



固定集合 frozenset
  固定集合是不可变的，无序的，含有唯一元素的集合

  作用:
    固定集合可以作为字典的键，也可以作为集合的值
  
  固定集合的构造函数 frozenset
    frozenset()  创建一个空的固定集合
    frozenset(iterable) 用可迭代对象创建一个新的固定集合

    示例:
      fz = frozenset()
      fz = frozenset("ABCAB")
      fz = frozenset([1, 2, 3, 4, 5])

固定集合的运算:
  &  交集
  |  并集
  - 补集
  ^ 对称补集
  in / not in运算
  > >= < <= == !=
  (以上运算等同于集合的运算)

固定集合的方法:
  相当于集合的全部方法去掉修改集合的方法


阶段总结:
  数据类型:
    不可变数据类型:
       bool, int, float, complex, str, tuple, frozenset,bytes(后面才学)
    可变的数据类型:
       list, dict, set, bytearray(后面才学)

    值:
      None, False, True, ....
  运算符:
    + - * / // % **
    < <= > >= == !=
    is , is not
    in , not in
    not  and   or
    &  |  ^  ~ << >>
    +(正号)  -(负号)

表达式:
  100
  100 + 200
  max(1,2,3)  # 函数调用也是表达式
  条件表达式  x if x > y else y
  全部的推导式:
      列表，字典，集合推导式(只有三种)

语句:
  表达式 语句:
    print("hello world!")
    '''这是字符串'''
  赋值语句:
    a = 100
    b = c = d = 200
    x, y = 100, 200
    列表[整数表达式] = 表达式
    字典[键] = 表达式
  if 语句
  while语句
  for 语句
  break 语句
  continue语句
  pass 语句
  del 语句
  
  函数:
    len(x),max(x), min(x), sum(x), any(x),all(x)
    构造函数:
      bool(x) int(x),float(x), complex(x),str(x)
      list(x), tuple(x),dict(x),
      set(x), frozenset(x)

    abs(x) round(x), pow(x,y,z=None)
    bin(x), oct(x), hex(x), chr(x), ord(x)
    range(start, stop, step)
    input(x), print(....)


函数 function
  什么是函数
    函数是可以重复执行的语句块，可以重复的调用
  
  作用:
    用于封装语句块，提高代码的重用性
    定义用户级别的函数

def 语句
  语法：
    def 函数名(形参列表):
        语句块（代码块)
  作用:
    用语句块创建一个函数，并用函数名变量绑定这个函数
  语法说明:
    1. 函数名是变量，它用于绑定语句块
    2. 函数有自己的名字空间，在函数外部不可以访问函数内部的变量，在函数内部可以访问函数外部的变量
      (要让函数处理外部的数据需要用参数给函数传入一些数据)
    3. 函数不需要传入参数时，形参列表可以为空
    4. 语句部分不能为空，如果为空需要填充pass语句


函数调用
  函数名(实际调用传递参数)
    注: 实际调用传递参数 以后称为实参

  说明:
   函数调用是一个表达式
   如果函数内部没有return语句，则函数执行完毕后返回None对象



练习:
  写一个函数 myadd,此函数中的参数列表里有两个参数x,y
  此函数的功能是打印x+y的和
      def myadd(...):
         ....

      myadd(100, 200)  # 300
      myadd("ABC", '123')  # ABC123
×××××××××××××××××××××××××××××××××××××××
def myadd(x, y):
    if type(x) is int:
        s = x + y  # 求实参的和
    elif type(x) is str:
        s = y
    print(s)
 

  

return 语句:
  语法:
    return [表达式]
    注: []代表可以省略其中的内容
  作用:
    用于函数中结束当前函数的执行，返回到调用该函数的地方，同时返回一个对象的引用关系
  return 语句说明:
    1. return 语句后跟表达式可以省略，省略后相当于 return None
    2. 如果函数内没有 return 语句，则函数执行完最后一条语句后返回None(相当于在最后加了一条return None语句)

练习:
  写一个函数myadd2, 实现返回两个数的和:
    如:
      def myadd(a, b):
          .... # 此处自己实现

    #测试代码如下:
      a = int(input("请输入第一个数: "))
      b = int(input("请输入第二个数: "))
      print("您输入的两个数之和是: ", myadd(a, b))
#########################################

def myadd(a, b):
    s = a + b
    return s
a = int(input("请输入第一个数: "))
b = int(input("请输入第二个数: "))
print("您输入的两个数之和是: ", myadd(a, b))


练习:
  1.  写一个函数mymax, 实现返回两个数的最大值:
  如:
    def mymax(a, b):
       ...
    print(mymax(100, 200))  # 200
    print(mymax("ABCD", "ABC"))  # ABCD
####################################
def mymax(a, b):
    if a > b:
        return a
    return b
###################################



  



