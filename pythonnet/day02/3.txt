昨天回顾：
字符串
  记录文字信息, 整数编码(UNICODE)

空字符串:“”
  'aaa'
  "aaa"
  '''aaa'''
  """aaa"""

'''aaaa
bbbb
cccc'''

\r \t \n \f \b \v
\'  \" \\
\xXX
\uXXXX
\UXXXXXXXX

ASCII 编码(0~127)
UNICODE编码(0~65535)

r原始字符串
  r'\a\b\c\d'  8个字符

运算符
  + *  += *=
  > >= < <= == !=
  in / not in
  序列:
    索引
      得到一个元素
    切片操作
      从字符串中拿出一部分字符,重新组成字符串
  函数:
    len(x)
    max(x)
    min(x)
    ord(c)  返回编码值
    chr(i)  用编码值返回字符
    bin(i)
    oct(i)
    hex(i)
    str(i)


今日笔记
字符串格式化表达式
  作用:
    生成一定格式的字符串
  运算符:
    %
  语法格式:
    格式字符串  % 参数值
    或
    格式字符串  % (参数值1, 参数值2, ...)
  说明:
    % 左侧为格式字符串
    % 右侧为参数值,当有多个参数值是用括号() 括起来,并用逗号(,)分隔
    格式化字符串中以%开头的为占位符,占位符的位置将用参数值替换
  示例:
    fmt = "name: %s, age: %d"
    s = fmt % ('xiaoming', 23)
    print(s)  # name: xiaoming, age: 23
    "温度:__%d__" % 32

 格式化字符串中的占位符和类型码
   %s   字符串,使用 str(x) 将x转换为字符串
   %r   字符串,使用 repr(x) 将x转换为字符串
   %c   整数转为单个字符
   %d   转为十进制整数
   %o   转为八进制整数
   %x   十六制进整数(字符a-f小写)
   %X   十六制进整数(字符A-F大写)
   %e   指数型浮点数(e小写), 如2.9e+10
   %E   指数型浮点数(E大写), 如2.9E+10
   %f, %F 浮点数(小数形式)
   %g, %G  十进制浮点数或指数浮点自动转换
   %%   等同于一个%字符

占位符和类型码之间的格式化语法:
  % [- + 0 宽度.精度] 类型码
  -   : 左对齐
  +   : 显示正号
  0   : 左侧空白位置补零
  宽度 : 整个字符串的字符个数
  精度 : 保留小数点后多少位(默认6位)

示例:
  "%10d"  % 123    # '       123'
  "%+10d" % 123    # '      +123'
  "%-10d" % 123    # '123       '
  "%10s"  % 'abc'  # '       abc'
  "%-5s"  % 'abc'  # 'abc  '
  "%010d" % 123    # '0000000123'
  "%7.3f" % 3.141592535897932  # '  3.141'
  "%07.2f" % 3.141592535897932  # '0003.14'



循环语句:
  有两条循环语句:
    while 语句
    for 语句
  问题:
    输入一个整数n,写程序打印如下n行字符串
      这是第1行
      这是第2行
      这是第3行
      这是第4行
      ...
      这是第n行
    如何让一条语句重复执行多次?
      如果i是一个变量,
      print("这是第", i, '行')

while 语句:
  作用:
    根据一定条件,重复的执行一条语句或多条语句

  语法:
    while 真值表达式:
        语句块1
    else:
        语句块2
  说明:
    1.先判断真值表达式,为True或False
    2. 如果为True,则执行语句块1,再回到第一步
    3. 如果为False,则执行语句块2,然后结束此while的执行
    4. else 子句部可以省略(同if类似)
  示例见:
i = 1  # i变量用于控制循环条件
while i <= 3:  # 如果条件为True
    print("hello!")
    i += 1  # 改变循环条件以便让循环终止
else:
    print("这是else子句,此时将离开while语句")
    print("此时i的值是:", i)  # 4


练习:
  1. 打印 1 ~ 20 的整数,打印在一行内
    1 2 3 4 5 6 .... 18 19 20
    print(i, end=' ')
####################################
i = 1
while i <= 20:
    print(i, end=' ')
    i += 1
else:
    print()
#####################################
  2. 打印 1 ~ 20 的整数,每行打印5个,打印四行,
    如:
       1 2 3 4 5
       6 7 8 9 10
       ....
    提示:
      可以将if语句嵌入到while语句中来实现换行
#####################################
j = 1
while j <= 5:
    
    i = 1
    while i <= 20:
        print(i, end=' ')
        i += 1
    else:
        print()
    j += 1

#####################################

  3. 用while语句,打印 10 ~ 1的整数
      10 9 8 7 6 5 4 3 2 1
######################################
i=10
while i>0:
    print(i)
    i=i-1
######################################
  4. 打印从零开始,的浮点数,每个数增加0.5, 打印出10以内的这样的数
    0.0
    0.5
    1.0
    1.5
    ...
    9.5
######################################
i=0.0
while i<10.0:
    print(i)
    i=i+0.5
######################################
练习:
  1. 写程序,计算:
    1 + 2 + 3 + 4 + ......+ 100 的和
########################################
s = 0  # 此变量用来记录累加的个数(和)
i = 1
while i <= 100:
    # 此时的i  1 2 3 4 5 6 7 8
    s += i  # 把i放在s内进行累加
    i += 1
print("和是:", s)
########################################
  2. 写一个程序
    输入一个开始的整数,用变量begin绑定
    输入一个结束的整数,用变量end绑定
    打印 从begin到end(不包含end) 的每个整数, 打印在一行内.
    如:
      请输入开始值: 8
      请输入结束值: 100
    打印:
      8 9 10 11 .....    99
    思考:
      如何实现每5个数打印在一行内,打印多行
########################################
begin = int(input("请输入开始整数: "))
end = int(input("请输入结束整数: "))

count = 0  # 此变量用来记录已经在一行内打印多少个数字

i = begin
while i < end:
    print(i, end=' ')
    count += 1  # 打印个数+1
    if count == 5:
        print()  # 换行后
        count = 0  # 本行的个数为0
    i += 1
else:
    print()
#########################################
while 语句注意事项:
  要控制循环真值表达式的值来防止死循环
  通常用真值表达式内的循环变量来控制循环条件
  通常在循环语句块内改变循环变量来控制循环次数和变量走向

while 语句的嵌套
  while 语句本身是语句,和其它语句一样,可以嵌套到任何复合语句中

示意:
  while 真值表达式:
      ...
      while 真值表达式2:
          ...
      else:
          ...
  else:
      ...



练习:
  输入一个整数代表正方形的宽度,用变量n绑定,
  打印指定宽度的正方形
  如:
    请输入: 5
  打印如下:
    1 2 3 4 5
    1 2 3 4 5
    1 2 3 4 5
    1 2 3 4 5
    1 2 3 4 5
  如:
    请输入: 3
  打印如下:
    1 2 3
    1 2 3
    1 2 3

#########################
n = int(input("请输入: "))
line = 1  # 代表当前行
while line <= n:
    # print('打印第%d行' % line)
    i = 1
    while i <= n:
        print(i, end=' ')
        i += 1
    print()  # 一行打印完,换行
    line += 1

#########################



break 语句
  作用:
    用于循环语句(while, for语句)中,用来终止当前循环语句的执行
  语法:
    break
  说明:
    1. 当break语句执行后,此循环语句break之后的语句将不再执行
    2. break语句通常和if语句组合使用
    3. break语句终止循环时else子句的语句将不会执行
    4. break语句只能终止当前循环语句的执行,如果有循环嵌套时,不会跳出嵌套的外重循环
  示例见:
############################
i = 1
while i <= 6:
    print('循环开始时:', i)
    if i == 3:
        break

    print('循环结束时:', i)
    i += 1

print("i 的值是", i)
print("----------程序退出--------")
############################

死循环
  死循环是指条件一直成立的循环
  死循环通常用break语句来终止循环
  死循环的else子句永远不会执行

练习:
  输入一个整数n,打印宽度为n个字符的正方形
  如:
    请输入: 4
  打印:
    ####
    #  #
    #  #
    ####
  如:
    请输入: 6
  打印:
    ######
    #    #
    #    #
    #    #
    #    #
    ######
**************************************
n = int(input("请输入长方形宽度: "))

print("#" * n)  # 打印第一行
line = 1
# 打印中间的n-2行
while line <= (n - 2):
    # 此处打印中间的一行
    print('#' + ' ' * (n - 2) + '#')
    line += 1

if n != 1:
    print("#" * n)  # 打印最后一行
*************************************

练习:
  1. 求下列多项式的和
    1 + 1/2 + 1/4 + 1/8 + ..... + 1/2**1000 的和
*******************************************************
s = 0  # 用于累加和
i = 0
while i <= 1000:
    s += 1 / 2 ** i
    i += 1

print(s)  
*******************************************************
  2. 写程序求:
    1 - 1/3 + 1/5 - 1/7 + 1/9 + .... + 1/(2*n-1)的和
    1)　求当n等于10000时，此公式的和
    2) 将上述结果乘以4后打印出来(看看这个数是什么？)
***************************************************************
s = 0  # 用于累加
n = 1
sign = 1  # 正负号(符号)
while n <= 10000:
    s += sign * 1 / (2 * n - 1)
    n += 1
    sign *= -1  # 变换符号

print("和是:", s)

print('乘4之后的和是:', s * 4)
***************************************************************
　　3. 用while语句实现打印三角形,输入一个整数,表示三角形的宽度和高度,打印出相应的直角三角形
     如:
     　　请输入三角形的宽度: 4
     1) 打印如下三角形:
        *
        **
        ***
        ****
     2) 打印如下三角形:
           *
          **
         ***
        ****
     3) 打印如下三角形:
        ****
         ***
          **
           *
     4) 打印如下三角形:
        ****
        ***
        **
        *

************************************************************

# 1) 打印如下三角形:
#    *
#    **
#    ***
#    ****

w = int(input("请输入三角形的宽度: "))
line = 1
while line <= w:
    # 根据行号来打印每行星号
    print('*' * line)
    line += 1


print('------------------------')
# 2) 打印如下三角形:
#       *
#      **
#     ***
#    ****
line = 1
while line <= w:
    # 先算空格的个数
    blanks = w - line
    print(' ' * blanks + '*' * line)
    line += 1

# 3) 打印如下三角形:
#    ****
#     ***
#      **
#       *
print('================================')
stars = w  # 星号个数
while stars > 0:
    # 先算空格个数
    blanks = w - stars
    print(' ' * blanks + '*' * stars)
    stars -= 1

# 4) 打印如下三角形:
#    ****
#    ***
#    **
#    *
print('+++++++++++++++++++++++++++++')
stars = w  # 星号个数
while stars > 0:
    print('*' * stars)
    stars -= 1
######################################################
#####################################################
   for 语句
  作用:
    用来遍历可迭代对象的数据元素
      可迭代对象是指能依次获取数据元素的对象

  可迭代对象包括:
    字符串 str
    ---以下后面会讲---
    列表 list
    元组 tuple
    ...

for 语法:
  for 变量列表 in 可迭代对象:
      语句块１
  else:
      语句块2

示例:
s = "ABCD"
for ch in s:
    print("ch--->>", ch)

练习:
  1. 任意输入一段字符串，
  　　1) 计算出输入字符'a'的个数，并打印出个数
  　　2) 计算出空格的个数，并打印出个数
  　　　　（要求用for语句，不允许用　str.count方法)
#############################################
s = input("请输入一段字符串: ")
count_a = 0  # 用来记录a的个数
for c in s:
    if c == 'a':
        count_a = count_a + 1
else:  # else子句只有在可迭代对象不能提供数时才会执行
    print('a的个数是:', count_a)

count_blank = 0
for c in s:
    if c == ' ':
        count_blank += 1
print('空格的个数是:', count_blank)
############################################


for 语句说明:
  else子句部分可以省略
  当在循环内部用break终止循环时，else子句部分不会执行


range 函数
  range(stop) 用来生成0~stop区间内的整数，直到stop为止(不包含stop)
  range(start, stop[, step])  用来生成start~stop区间内的整数,直到stop为止(不包含stop),每次生成整数后移动step
格式详见:
   >>> help(range)
作用:
  用来创建一个生成一系列整数的可迭代对象(也叫整数序列生成器)
说明:
  range返回的对象可以有for语句来进行依次迭代访问取出其中的整数
示意:
  range(4)         # 生成 0, 1, 2, 3
  range(3, 6)      # 生成 3, 4, 5
  range(1, 10, 2)  # 生成 1, 3, 5, 7, 9
  range(5, 0, -2)  # 生成 5, 3, 1
  range(4, 0)      # 空
练习:
  1. 用 for语句打印 1 ~ 20 的整数,打印在一行内:
    1 2 3 4 5 ..... 20
#############################################
for i in range(1, 21):
    print(i, end=' ')
else:
    print()  # 换行

#############################################
  2. 计算 1 + 3 + 5 + 7 + ..... + 99 的和
    分别用 for语句 和 while语句 实现
#############################################
#for#
s=0
for i in range(1,100,2)
    s=s+i
print(s)

#############################################
#while#
s=0
i=1
while i<100:
    s=s+0
    i=i+2
print(s)
#############################################


for 语句变量可能不被创建的问题:
for x in range(4, 0):
    print(x)

print('x绑定', x)


for 语句的嵌套:
  for x in "ABC":
      for y in "123":
          print(x + y)
  

思考下列程序的打印次数:
  for x in range(5):
      for y in range(10):
          print("hello")  # 请问打印多少个hello?

练习:
  1. 求: 100以内有哪儿些数与自身+1的乘积再对 11 求余等于8?
      x * (x+1)  % 11 == 8
################################################
for x in range(1,101):
    if  x * (x+1)  % 11 == 8:
        print(x)
################################################
  2. 输入一个数,打印如下正方形(用for实现)
     请输入: 5
     打印:
       1 2 3 4 5
       1 2 3 4 5
       1 2 3 4 5
       1 2 3 4 5
       1 2 3 4 5
################################################
n = int(input("请输入: "))
for line_number in range(1, n + 1):
    # print("1 2 3 4 5")
    for x in range(1, n + 1):
        print(x, end=' ')
    print()
################################################
  3. 输入一个数,打印如下正方形
     请输入: 5
     打印:
       1 2 3 4 5
       2 3 4 5 6
       3 4 5 6 7
       4 5 6 7 8
       5 6 7 8 9
################################################
n = int(input("请输入: "))
for line_number in range(1, n + 1):
    for x in range(line_number, n + line_number):
        print("%2d" % x, end=' ')
    print() 

################################################



continue 语句
  作用:
    用于循环语句(while,for)中,不再执行本次循环continue之后的语句,重新开始一次新的循环
  语法:
    continue
  说明:
    1. 在while语句中执行continue,将会直接跳转到while语句的真值表达式处重新判断循环条件
    2. 在 for 语句中执行continue语句,将会从可迭代对象中取下一个元素,绑定变量后再次进行循环
示例:
for x in range(10):
    if x % 2 == 0:  # 是偶数,跳过
        continue
    print(x)


练习:
  1. 求 1 ~ 100之间,所有不能被2, 3, 5, 7 整除的数的和
   (跳过能整除的,剩下的就是不能整除的)
###############################################
s = 0

for x in range(1, 101):
    if x % 2 == 0:
        continue
    if x % 3 == 0:
        continue
    if x % 5 == 0:
        continue
    if x % 7 == 0:
        continue
    s += x

print('和是:', s)
################################################
while中使用continue示例见:
x = 0
while x < 5:
    if x == 2:
        x += 1
        continue
    print(x)
    x += 1
##################################################
循环小结:
  四条语句:
    while 语句
    for 语句
    break 语句
    continue 语句
  可迭代对象:
    str 字符串
    range() 函数返回的对象



列表 list
  问题:
    如何将计算机运算的数据临时保存在一个地方,同时又方便添加,删除和修改等操作
  容器
列表的定义:
  列表是一种容器
  列表是可以被改变的序列
  列表是由一系列特定元素组成的,元素与元素之间可能没有任何的关联关系,但他们之间有先后顺序关系

python3的中的序列类型:
  字符串 str
  列表 list
  元组 tuple
  字节串 bytes
  字节数组 bytearray

创建空列表的字面值表达式
  []  # 创建一个空列表
  L = []  变量L绑定一个新创建的空列表
创建非空的列表的字面值:
  L = [1, 2, 3, 4]#L绑定一个新创建且含有四个元素的列表
  L = ['Beijing', 'Shanghai', 'Shenzhen']
  L = [1, 'Two', 3.14, '四']
  L = [1, 2, [3.1, 3.2, 3.2], 4]  

列表的构造函数 list
  list()  生成一个空的列表,等同于 []
  list(iterable)  用可迭代对象创建一个列表
示例:
  L = list()  # L = []
  L = list("hello")  # L = ['h','e','l','l','o',]
  L = list(range(5))  # L = [0, 1, 2, 3, 4]
列表的运算:
  算术运算:
    + += * *= (运算规则与字符串的运算规则相同)

+ 用于拼接列表,生成新的列表
  x = [1, 2, 3]
  y = [4, 5, 6]
  z = x + y  # z = [1,2,3,4,5,6]

+= 用原列表与右侧可迭代对象追加来修改原列表
  语法:
     列表变量 += 可迭代对象
  示例:
    x = [1, 2, 3]
    y = [4, 5, 6]
    x += y  # x = [1, 2, 3, 4, 5, 6]
    x += "ABC" # x = [1,2,3,4,5,6,'A','B','C']
    x = [1, 2, 3]
    x += range(4, 6)  # x = [1, 2, 3, 4, 5]
    # += 是改变原来的列表对象,并不会创建新的列表
    x = [1, 2, 3]
    print(id(x))
    x += [4, 5, 6]
    print(id(x))

* 生成重复的列表
  x = [1, 2] * 3  # x = [1,2,1,2,1,2]

*= 生成重复的列表,并改变对变量的绑定 
  x = [1, 2, 3]
  x *= 4  # x = [1,2,3,1,2,3,1,2,3,1,2,3]

列表的比较运算:
  运算符:
    < <= > >= == !=
       比较规则与字符串的比较规则相同

  示例:
    [1,2,3] < [1, 2, 4]  # True
    [1, 2, 3] < [3, 2, 1]  # True
    [1, 2, 3] == [3, 2, 1]  # False
    [2, 3] >= [1, 2, 3]  # True

    [1, "2"] > ['2', 1]  # 报错
    ["ABC", 1, 2, 3] < ["123", 3, 2]  # 

列表是可迭代对象
  L = [1, 3, 5, 7]
  for x in L:
     print(x)   # 1 3 5 7

练习:
  1. 输入三行文字，将这三行文字保存于列表L中，并打印
    如:
      请输入: abc<回车>
      请输入: 1234<回车>
      请输入: 你好<回车>
    生成如下列表L = ['abc', '1234', '你好']
    print(L)  # ['abc', '1234', '你好']
#############################################
a = input('请输入:')  # abc
b = input('请输入:')
c = input('请输入:')
L = [a, b, c]
print(L)
#############################################

  2. 输入任意行文字，存于列表中L中，当不输入内容直接回车后结束输入:
     1) 打印L列表中的内容
     2) 打印出您刚才输入了几行文字信息
     3) 打印出您刚才输入了多少个字符数据
###############################################
L = []  # 先创建一个列表容器准备放数据
while True:
    s = input("请输入: ")  # 让用户循环输入字符串
    # 等用户输入完毕后，判断这个字符串是否为空
    if s == '':
        break  # 不再输入
    L += [s]

# 1) 打印L列表中的内容
print('L=', L)

# 2) 打印出您刚才输入了几行文字信息
# print("您刚才输入了%d行文字" % len(L))
lines = 0
for _ in L:
    lines += 1
print("您刚才输入了%d行文字" % lines)

# 3) 打印出您刚才输入了多少个字符数据
char_count = 0
for aline in L:
    char_count += len(aline)

print('您刚才输入了%d个字符' % char_count)

###############################################

练习：
　　1. 写一个程序，任意输入一个数，判断这个数是否是素数(prime)
    素数（也叫质数),是只能被１和自身整除的正整数
     如: 2 3 5 7 11 13 17 19 ....
    提示:
      用排除法: 当判断x是否为素数时，只要让x分别除以2, 3, 4, 5 ... x-1，只要能整数则x不是素数,否则x是素数
#####################################################
x = int(input('请输入一个整数: '))
if x < 2:
    print(x, '不是素数')
else:  # n大于等于2
    for i in range(2, x):
        if x % i == 0:  # 如果整除
            print(x, '不是素数')
            break
    else:
        print(x, '是素数')

#####################################################
  2. 输入一个正整数(代表树干的高度)
  　　　打印如下一棵圣诞树
     如:
       输入: 2 
     打印:
       *
      ***
       *
       *
     如:
       输入: 3
     打印:
        *
       ***
      *****
        *
        *
        *
##############################################################
n = int(input("请输入树干的高度: "))
# 打印树叶部分
for i in range(1, n + 1):
    stars = 2 * i - 1  # 星号个数
    blanks = n - i  # 空格数
    print(' ' * blanks + '*' * stars)


# 打印树干部分
for _ in range(n):
    print(' ' * (n - 1) + '*')

##############################################################
  3. 算出100~999之间的水仙花数(Narcissistic Number)
    水仙花数是指百位的3次方 + 十位的3次方 + 个位的3次方等于原数的整数

    例如:
       153 = 1**3 + 5**3 + 3 ** 3
    答案:
      153  370 ...
###############################################################
# # 方法1
# for x in range(100, 1000):
#     bai = x // 100  # 百位
#     shi = x % 100 // 10  # 十位
#     ge = x % 10
#     if x == bai ** 3 + shi ** 3 + ge ** 3:
#         print(x)

# 方法2
# for x in range(100, 1000):
#     s = str(x)  # 转为字符串
#     bai = int(s[0])
#     shi = int(s[1])
#     ge = int(s[2])
#     if x == bai ** 3 + shi ** 3 + ge ** 3:
#         print(x)

# 方法3(循环嵌套)
for bai in range(1, 10):
    for shi in range(10):
        for ge in range(10):
            # print(bai, shi, ge)
            x = bai * 100 + shi * 10 + ge
            if x == bai ** 3 + shi ** 3 + ge ** 3:
                print(x)
################################################################






